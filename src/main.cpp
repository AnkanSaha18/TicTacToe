#include <Arduino.h>
#include <Keypad.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#include <SPI.h>
//#include <myLibrary.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET 4     // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char ticTacToeLogo[] PROGMEM = {
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11110001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000001, B01011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000001, B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000001, B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000000, B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B01100000, B11000000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B00001111, B00000000, B00011111, B00001111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11100000, B00000000, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B01000000, B00000000, B00000000, B00100000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B01111110, B00000000, B00000111, B11100000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B00111111, B10000000, B00111111, B11000000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111000, B00000001, B10000000, B00011000, B00000001, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000001, B10000000, B00011000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B10000000, B00010000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B11000000, B01110000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B00000000, B11111001, B11110000, B00000011, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B00000000, B11111111, B11110000, B00000111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B10000000, B01111111, B11100000, B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11000000, B01111111, B11100000, B00111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11110000, B01111111, B11100000, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111100, B01111111, B11100011, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111110, B01111111, B11001111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B00011111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111100, B00000001, B00011111, B11111111, B11000000, B00011111, B11111111, B11111111, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111100, B00000001, B11111111, B11111111, B11000000, B00011111, B11111111, B11111111, B00000000, B01111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111100, B00000001, B00011111, B00001111, B11000000, B00110000, B01111110, B00111111, B00000000, B01110000, B11111100, B01111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B10000111, B00011100, B00001111, B11110000, B11100000, B00110000, B00011111, B11100001, B11000000, B01100000, B00111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B00000111, B00011000, B11011111, B11110000, B11111100, B00110001, B00111111, B11100001, B10001100, B01100010, B00111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B00000111, B00011000, B11111111, B11110000, B11111000, B00100001, B11111111, B11100001, B10001100, B01000010, B00111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B00000111, B00011000, B11111111, B11110000, B11100110, B00100001, B11111111, B11100001, B10001100, B01000000, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B00000111, B00011000, B00111111, B11110000, B11000110, B00110000, B01111111, B11100001, B10001100, B01100000, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B00000111, B00001100, B00001111, B11110000, B01100000, B00110000, B00111111, B11100001, B11000000, B11100000, B00111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
    B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111};

const unsigned char loseLogo[] PROGMEM = {
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00100000, B00001000, B00000000, B00000000, B00000111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00110000, B00011000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00010000, B00010000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00001000, B00100000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00001100, B00100000, B00000000, B00000000, B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B11100000, B00000000, B00000000,
    B00000000, B00000000, B00000100, B01000011, B11000111, B00000100, B00000001, B00000000, B00011110, B00001111, B10000011, B11000000, B00011111, B11100000, B00000000, B00000000,
    B00000000, B00000000, B00000010, B11000110, B00100001, B00000100, B00000001, B00000000, B00110001, B00011000, B01000100, B01100000, B01111111, B11100000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B10001100, B00010001, B00000100, B00000001, B00000000, B00100000, B10011000, B01001000, B00100000, B01111111, B11100000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00001000, B00010001, B00000100, B00000001, B00000000, B01000000, B10001100, B00001000, B00100000, B01111111, B11100000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00001000, B00010001, B00000100, B00000001, B00000000, B01000000, B10000011, B10001111, B11100000, B01111111, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00001000, B00010001, B00000100, B00000001, B00000000, B01000000, B10000000, B11001000, B00000000, B00111111, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00000100, B00010001, B00001100, B00000001, B00000001, B00100000, B10010000, B01001100, B00100000, B00111111, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00000110, B00100001, B10011100, B00000001, B00000001, B00110001, B00011000, B11000110, B01100000, B00011111, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00000001, B11000000, B11100011, B00000001, B11111111, B00001110, B00001111, B10000011, B11000000, B00011111, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

const unsigned char winLogo[] PROGMEM = {
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B11111000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000010, B11111111, B11111101, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000110, B01111111, B11111001, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000100, B00000001, B00000000, B00000000, B00000010, B00000000, B00001000, B00000000, B00000010, B01111111, B11111011, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000010, B00000011, B00000000, B00000000, B00000010, B00000000, B00001001, B00000000, B00000011, B01111111, B11111111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000011, B00000010, B00000000, B00000000, B00000010, B00000000, B00001000, B00000000, B00000001, B11111111, B11111110, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000001, B00000100, B00000000, B00000000, B00000001, B00000000, B00010000, B00000000, B00000000, B01111111, B11111000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B10001100, B00000000, B00000000, B00000001, B00000100, B00010000, B00000000, B00000000, B00011111, B11100000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B11001000, B11111001, B11000010, B00000001, B10000100, B00110011, B00110111, B10000000, B00001111, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B01010001, B10001100, B01000010, B00000000, B10000100, B00100001, B00001100, B01000000, B00000111, B10000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00110001, B00000100, B01000010, B00000000, B10001010, B00100001, B00001000, B01000000, B00000111, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00100001, B00000100, B01000010, B00000000, B01001010, B01000001, B00001000, B01000000, B00000011, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00100001, B00000100, B01000010, B00000000, B01010001, B01000001, B00001000, B01000000, B00000111, B10000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00100001, B00000100, B01000010, B00000000, B01110001, B11000001, B00001000, B01000000, B00001111, B11000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00100000, B10001000, B01001111, B00000000, B01110001, B11000001, B10001000, B01000000, B00011111, B11100000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00100000, B01110000, B00110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11110000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11110000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B11100000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

const unsigned char drawLogo[] PROGMEM = {
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B01000000, B00000001, B10000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00111000, B01111000, B00000000, B01100000, B00000001, B10000000, B00000111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00111000, B01111000, B00000000, B01100000, B00000001, B10000000, B00000111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00111100, B01111000, B00000000, B11100000, B00000001, B10000000, B00000110, B01110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00111100, B11111000, B11111001, B11111001, B11110001, B11111000, B00000110, B00110011, B01110011, B11100011, B00011001, B11000000, B00000000, B00000000,
    B00000000, B00000000, B00111100, B11111001, B11111001, B11110001, B11110001, B11111100, B00000110, B00110011, B11110011, B11110011, B00111001, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00111100, B11111001, B10011000, B11100011, B10111001, B10011100, B00000110, B00110011, B10110111, B00110011, B00111001, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110110, B11111001, B10011000, B11100011, B00011001, B10011100, B00000110, B00110011, B10110110, B00110011, B00111001, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110110, B10111000, B00011000, B11100011, B00000001, B10011100, B00000110, B00110011, B10000000, B00110011, B10111101, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110111, B10111000, B00111000, B11100011, B00000001, B10011100, B00000110, B00110011, B10000000, B01110001, B10101101, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110111, B10111000, B11111000, B11100011, B00000001, B10011100, B00000110, B00110011, B10000001, B11110001, B10101101, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110011, B10111001, B11011000, B11100011, B00000001, B10011100, B00000110, B00110011, B10000011, B00110001, B11101101, B10000000, B00000000, B00000000,
    B00000000, B00000000, B00110011, B00111001, B10011000, B11100011, B00000001, B10011100, B00000110, B00110011, B10000111, B00110001, B11100111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00110011, B00111001, B10011000, B11100011, B00011001, B10011100, B00000110, B00110011, B10000111, B00110001, B11100111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00110011, B00111011, B10011000, B11100011, B10111001, B10011100, B00000110, B01110011, B10000111, B00110001, B11100111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00110000, B00111001, B11111000, B11111001, B11110001, B10011100, B00000111, B11100011, B10000111, B11110000, B11000111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00110000, B00111001, B11111000, B01111001, B11110001, B10011100, B00000111, B11000011, B10000011, B11110000, B11000111, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11111111, B11111111, B11100000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00001111, B11111111, B11111000, B11111111, B11111111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11111100, B00000000, B00000000, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11100000, B00000000, B00000000, B00011111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000000, B00000000, B00000000, B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00000000, B00000000, B00000000, B00000011, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111100, B00000000, B00000000, B00000000, B00000001, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111000, B00001111, B11111111, B11111111, B11000000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111000, B00111111, B11111111, B11111111, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111000, B00111111, B11111111, B11111111, B11110000, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000111, B11111100, B00001111, B11111111, B11111111, B11000001, B11111111, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000011, B11111110, B00000000, B00000000, B00000000, B00000001, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B00000000, B00000000, B00000000, B00000111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B11111111, B11000000, B00000000, B00000000, B00011111, B11111000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00111111, B11111000, B00000000, B00000000, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00011111, B11111111, B11100000, B00111111, B11111111, B11000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000011, B11111111, B11111111, B11111111, B11111110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01111111, B11111111, B11111111, B11110000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000001, B11111111, B11111100, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000,
    B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000};

class coordinate
{
public:
  int x;
  int y;
  coordinate(int a, int b)
  {
    x = a;
    y = b;
  }
};

int choice = 0; ///crose(1) or circle(0)
int me = 0;
// cross for 1
//and circle for -1
int decision = 0; ///who will move first   me(0) or oponent(1)

const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
char keys[ROWS][COLS] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}};
byte rowPins[ROWS] = {28, 26, 24, 22}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {30, 32, 34, 36}; //connect to the column pinouts of the keypad

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const coordinate coordinateMat[3][3] =
    {
        {coordinate(0, 0), coordinate(22, 0), coordinate(44, 0)},
        {coordinate(0, 22), coordinate(22, 22), coordinate(44, 22)},
        {coordinate(0, 44), coordinate(22, 44), coordinate(44, 44)},
};

int mainMat[3][3] =
    {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}};
int memoryMat[3][3] =
    {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}};

void clearAll()
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 3; j++)
    {
      mainMat[i][j] = 0;
      memoryMat[i][j] = 0;
    }
  }
}

void crossDisplay(int ini_x, int ini_y)
{
  int crossSize = 1; //      1~5     (1<2<3<4<5)
  int freeSpace = 5 - crossSize;
  int squarSize = 20;

  for (int i = ini_x + freeSpace, j = ini_y + freeSpace; (i < squarSize + ini_x - freeSpace - 1) && (j < squarSize + ini_y - freeSpace - 1); i++, j++)
  {
    display.drawPixel(i, j, WHITE);
    display.drawPixel(i + 1, j, WHITE);
    display.drawPixel(i, j + 1, WHITE);
    display.drawPixel(i + 1, j + 1, WHITE);

    display.drawPixel(i, 2 * ini_y + squarSize - j - 1, WHITE);
    display.drawPixel(i + 1, 2 * ini_y + squarSize - j - 1, WHITE);
    display.drawPixel(i, 2 * ini_y + squarSize - j - 1 - 1, WHITE);
    display.drawPixel(i + 1, 2 * ini_y + squarSize - j - 1 - 1, WHITE);

    display.display();
  }
  display.display();
}

void circleDisplay(int ini_x, int ini_y)
{
  int circleSize = 2;
  int squarSize = 20;

  display.fillCircle(ini_x + squarSize / 2 - 1, ini_y + squarSize / 2, 3 + circleSize, SSD1306_INVERSE);
  display.fillCircle(ini_x + squarSize / 2, ini_y + squarSize / 2 - 1, 1 + circleSize, SSD1306_INVERSE);
  display.display();
  //delay(3000);
}

void displayCrossCircle()
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 3; j++)
    {
      if (mainMat[i][j] != 0 && memoryMat[i][j] == 0)
      {
        memoryMat[i][j] = mainMat[i][j];
        if (mainMat[i][j] == 1)
        {
          crossDisplay(coordinateMat[i][j].x, coordinateMat[i][j].y);
        }
        else
        {
          circleDisplay(coordinateMat[i][j].x, coordinateMat[i][j].y);
        }
      }
    }
  }
}

void picDisplay(int a, int clear = 1)
{
  if (clear)
    display.clearDisplay();

  switch (a)
  {
  case 1:
    display.drawBitmap(0, 0, ticTacToeLogo, 128, 64, WHITE);
    break;
  case 2:
    display.drawBitmap(0, 0, loseLogo, 128, 64, WHITE);
    break;
  case 3:
    display.drawBitmap(0, 0, winLogo, 128, 64, WHITE);
    break;
  case 4:
    display.drawBitmap(0, 0, drawLogo, 128, 64, WHITE);
    break;
  }

  display.display();
  delay(2000);
  display.invertDisplay(1);
  delay(2000);
  display.invertDisplay(0);
  if (clear)
    display.clearDisplay();

  return;
}

void tableDisplay()
{
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  for (int j = 0; j < 64; j++)
  {
    for (int i = 0; i < 64; i++)
    {
      if (i == 20 || i == 21 || i == 42 || i == 43 || j == 20 || j == 21 || j == 42 || j == 43)
      {
        display.drawPixel(i, j, WHITE);
        //display.display();
      }
      //delay(20);
    }
    display.display();
  }
  display.display();
  delay(500);
}

void takeChioce()
{
  //display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("\n\n Enter Your Symbol::\n");
  display.setTextSize(2);
  display.println("  s1 :  ");
  crossDisplay(80, 32);
  display.print("  s2 :  ");
  circleDisplay(80, 48);
  display.display();

  char key = keypad.getKey();

  while (1)
  {
    key = keypad.getKey();
    if (key)
    {
      Serial.println(key);
      break;
      break;
    }
    delay(5);
    //Serial.println("error");
  }

  if (key == '1')
  {
    choice = 1; ///cross
    me = -1;

    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("YourChoice\n");
    display.print("Cross :  ");
    crossDisplay(90, 32);
    delay(2000);

    display.clearDisplay();
    delay(500);
    display.setCursor(0, 10);
    display.setTextSize(3);
    display.setTextColor(WHITE);
    display.println(" Let's");
    display.println("  Play");
    display.display();
    delay(2000);
  }
  else if (key == '2')
  {
    choice = -1; ///circle
    me = 1;      ///cross

    display.clearDisplay();
    display.setCursor(0, 0);
    display.setTextSize(2);
    display.println("YourChoice\n");
    display.print("Circle :  ");
    circleDisplay(95, 32);
    delay(2000);

    display.clearDisplay();
    delay(500);
    display.setCursor(0, 10);
    display.setTextSize(3);
    display.setTextColor(WHITE);
    display.println(" Let's");
    display.println("  Play");
    display.display();
    delay(2000);
  }
  else
  {
    display.clearDisplay();
    delay(50);
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println("----Invalid Input----");
    display.print("-----Enter Again-----");
    display.display();
    delay(250);

    takeChioce();
  }
  return;
}

void takeDecision()
{
  display.clearDisplay();
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.println("  Would you like to   \n move first or Not ?? ");
  display.setTextSize(2);
  display.println("s1: First");
  display.print("s2: Second ");
  display.display();

  char key = keypad.getKey();

  while (1)
  {
    key = keypad.getKey();
    if (key)
    {
      Serial.println(key);
      break;
      break;
    }
    delay(5);
    //Serial.println("error");
  }

  if (key == '1')
  {
    decision = 1; ///oponent will move first

    display.clearDisplay();
    delay(500);
    display.setCursor(0, 10);
    display.setTextSize(3);
    display.setTextColor(WHITE);
    display.println(" Let's");
    display.println("  GO!!");
    display.display();
    delay(2000);
  }
  else if (key == '2')
  {
    decision = 0; ///i will move first

    display.clearDisplay();
    delay(500);
    display.setCursor(0, 10);
    display.setTextSize(3);
    display.setTextColor(WHITE);
    display.println(" Let's");
    display.println("  GO!!");
    display.display();
    delay(2000);
  }
  else
  {
    display.clearDisplay();
    delay(50);
    display.setCursor(0, 16);
    display.setTextSize(2);
    display.println(" -Invalid-\n --Input--");
    display.display();
    delay(250);

    takeDecision();
  }
  return;
}

int takeMove()
{
  int timeDelay = 10000; //10 second ;time for each move(for oponent)
  char key = keypad.getKey();

  int long long recentime = millis();

  while (millis() - recentime < timeDelay)
  {
    int ind = 0;
    key = keypad.getKey();
    switch (key)
    {
    case '1':
      if (mainMat[0][0] == 0)
      {
        mainMat[0][0] = choice;
        ind = 1;
      }
      break;
    case '2':
      if (mainMat[0][1] == 0)
      {
        mainMat[0][1] = choice;
        ind = 1;
      }
      break;
    case '3':
      if (mainMat[0][2] == 0)
      {
        mainMat[0][2] = choice;
        ind = 1;
      }
      break;
    case '4':
      if (mainMat[1][0] == 0)
      {
        mainMat[1][0] = choice;
        ind = 1;
      }
      break;
    case '5':
      if (mainMat[1][1] == 0)
      {
        mainMat[1][1] = choice;
        ind = 1;
      }
      break;
    case '6':
      if (mainMat[1][2] == 0)
      {
        mainMat[1][2] = choice;
        ind = 1;
      }
      break;
    case '7':
      if (mainMat[2][0] == 0)
      {
        mainMat[2][0] = choice;
        ind = 1;
      }
      break;
    case '8':
      if (mainMat[2][1] == 0)
      {
        mainMat[2][1] = choice;
        ind = 1;
      }
      break;
    case '9':
      if (mainMat[2][2] == 0)
      {
        mainMat[2][2] = choice;
        ind = 1;
      }
      break;
    }

    long long time = millis() - recentime;
    time /= 1000;
    char temp = time + 48;
    display.setCursor(80, 10);
    display.setTextSize(1);
    display.print("Timer");

    //clearing  only a certain portion
    for (int i = 80; i < 110; i++)
    {
      for (int j = 25; j < 45; j++)
      {
        display.drawPixel(i, j, SSD1306_BLACK);
      }
    }
    display.display();

    display.setTextSize(2);
    display.setCursor(80, 25);
    display.print(temp);
    Serial.println(temp);
    display.display();

    if (ind)
    {
      displayCrossCircle();
      return 0;
    }
  }

  display.clearDisplay();
  display.setTextSize(3);
  display.setCursor(10, 10);
  display.println(" Time");
  display.println(" Over");
  display.display();
  delay(2000);
  return 1;
  //picDisplay(2);

  //time over feature need to add
  //display.
}

void myMove1()
{
  int in_x = rand() % 3;
  int in_y = rand() % 3;
  while (1)
  {
    Serial.print(in_x);
    Serial.print("   ");
    Serial.print(in_y);

    if (mainMat[in_x][in_y] == 0)
    {
      mainMat[in_x][in_y] = me;
      break;
    }
    in_y = rand() % 3;
    in_x = rand() % 3;
  }
  displayCrossCircle();
}

void myMove2()
{
  int ind = 0;

  //1st part  ::  this part cheak only won win chance
  //colum cheak :: means three element cheak in a colum
  for (int i = 0; i < 3 && ind == 0; i++)
  {
    if (mainMat[i][0] == me && mainMat[i][1] == me && mainMat[i][2] == 0)
    {
      mainMat[i][2] = me;
      ind = me;
    }
    else if (mainMat[i][0] == me && mainMat[i][2] == me && mainMat[i][1] == 0)
    {
      mainMat[i][1] = me;
      ind = me;
    }
    else if (mainMat[i][2] == me && mainMat[i][1] == me && mainMat[i][0] == 0)
    {
      mainMat[i][0] = me;
      ind = me;
    }
  }

  //row cheak :: means three element cheak in a row
  for (int j = 0; j < 3 && ind == 0; j++)
  {
    if (mainMat[0][j] == me && mainMat[1][j] == me && mainMat[2][j] == 0)
    {
      mainMat[2][j] = me;
      ind = me;
    }
    else if (mainMat[0][j] == me && mainMat[2][j] == me && mainMat[1][j] == 0)
    {
      mainMat[1][j] = me;
      ind = me;
    }
    else if (mainMat[2][j] == me && mainMat[1][j] == me && mainMat[0][j] == 0)
    {
      mainMat[0][j] = me;
      ind = me;
    }
  }

  //accross cheak:: means two digonal of matrix
  if (mainMat[0][0] == me && mainMat[1][1] == me && mainMat[2][2] == 0 && ind == 0)
  {
    mainMat[2][2] = me;
    ind = me;
  }
  else if (mainMat[0][0] == me && mainMat[2][2] == me && mainMat[1][1] == 0 && ind == 0)
  {
    mainMat[1][1] = me;
    ind = me;
  }
  else if (mainMat[2][2] == me && mainMat[1][1] == me && mainMat[0][0] == 0 && ind == 0)
  {
    mainMat[0][0] = me;
    ind = me;
  }

  if (mainMat[0][2] == me && mainMat[1][1] == me && mainMat[2][0] == 0 && ind == 0)
  {
    mainMat[2][0] = me;
    ind = me;
  }
  else if (mainMat[0][2] == me && mainMat[2][0] == me && mainMat[1][1] == 0 && ind == 0)
  {
    mainMat[1][1] = me;
    ind = me;
  }
  else if (mainMat[2][0] == me && mainMat[1][1] == me && mainMat[0][2] == 0 && ind == 0)
  {
    mainMat[0][2] = me;
    ind = me;
  }
  if (ind != 0)
  {
    displayCrossCircle();
    return;
  }

  //2nd part   :: to dismiss oponent's winning chance
  Serial.println("Start debugging");
  for (int i = 0; i < 3 && ind == 0; i++)
  {
    if (mainMat[i][0] == choice && mainMat[i][1] == choice && mainMat[i][2] == 0)
    {
      mainMat[i][2] = me;
      ind = me;
    }
    else if (mainMat[i][0] == choice && mainMat[i][2] == choice && mainMat[i][1] == 0)
    {
      mainMat[i][1] = me;
      ind = me;
    }
    else if (mainMat[i][2] == choice && mainMat[i][1] == choice && mainMat[i][0] == 0)
    {
      mainMat[i][0] = me;
      ind = me;
    }
    Serial.println(ind);
  }

  //row cheak :: means three element cheak in a row
  for (int j = 0; j < 3 && ind == 0; j++)
  {
    if (mainMat[0][j] == choice && mainMat[1][j] == choice && mainMat[2][j] == 0)
    {
      mainMat[2][j] = me;
      ind = me;
    }
    else if (mainMat[0][j] == choice && mainMat[2][j] == choice && mainMat[1][j] == 0)
    {
      mainMat[1][j] = me;
      ind = me;
    }
    else if (mainMat[2][j] == choice && mainMat[1][j] == choice && mainMat[0][j] == 0)
    {
      mainMat[0][j] = me;
      ind = me;
    }
    Serial.println(ind);
  }

  //accross cheak:: means two digonal of matrix
  if (mainMat[0][0] == choice && mainMat[1][1] == choice && mainMat[2][2] == 0 && ind == 0)
  {
    mainMat[2][2] = me;
    ind = me;
    Serial.println(ind);
  }
  else if (mainMat[0][0] == choice && mainMat[2][2] == choice && mainMat[1][1] == 0 && ind == 0)
  {
    mainMat[1][1] = me;
    ind = me;
    Serial.println(ind);
  }
  else if (mainMat[2][2] == choice && mainMat[1][1] == choice && mainMat[0][0] == 0 && ind == 0)
  {
    mainMat[0][0] = me;
    ind = me;
    Serial.println(ind);
  }

  if (mainMat[0][2] == choice && mainMat[1][1] == choice && mainMat[2][0] == 0 && ind == 0)
  {
    mainMat[2][0] = me;
    ind = me;
    Serial.println(ind);
  }
  else if (mainMat[0][2] == choice && mainMat[2][0] == choice && mainMat[1][1] == 0 && ind == 0)
  {
    mainMat[1][1] = me;
    ind = me;
    Serial.println(ind);
  }
  else if (mainMat[2][0] == choice && mainMat[1][1] == choice && mainMat[0][2] == 0 && ind == 0)
  {
    mainMat[0][2] = me;
    ind = me;
    Serial.println(ind);
  }

  if (ind == 0)
  {
    myMove1();
  }
  else
  {
    displayCrossCircle();
  }
  return;
}

void drawWinLine(int a)
{
  switch (a)
  {
  case 1:
  case 2:
  case 3:
    int index_y;
    index_y = coordinateMat[a - 1][0].y + 8;
    Serial.print(coordinateMat[a - 1][0].x);
    Serial.print("    ");
    Serial.println(coordinateMat[a - 1][0].y);

    for (int i = 0; i < 64; i++)
    {
      for (int j = index_y; j < index_y + 4; j++)
      {
        display.drawPixel(i, j, WHITE);
      }
      display.display();
    }
    display.display();

    break;
  case 4:
  case 5:
  case 6:
    int index_x;
    index_x = coordinateMat[0][a % 4].x + 8;
    Serial.print(coordinateMat[0][a % 4].x);
    Serial.print("    ");
    Serial.println(coordinateMat[0][a % 4].y);

    for (int j = 0; j < 64; j++)
    {
      for (int i = index_x; i < index_x + 4; i++)
      {
        display.drawPixel(i, j, WHITE);
      }
      display.display();
    }
    display.display();

    break;
  case 7:
  case 8:
    for (int i = 0, j = 0; i < 62 && j < 62; i++, j++)
    {
      if (a == 7)
        for (int m = i; m < i + 3; m++)
        {
          for (int n = j; n < j + 3; n++)
          {
            display.drawPixel(m, n, WHITE);
          }
        }

      else
        for (int m = i; m < i + 3; m++)
        {
          for (int n = 63 - j; n > (63 - j) - 3; n--)
          {
            display.drawPixel(m, n, WHITE);
          }
        }

      display.display();
    }

  default:
    break;
  }
}

int cheakThreeMove()
{
  int ind = 0;
  int win = 0;
  //row cheak
  for (int j = 0; j < 3 && ind == 0; j++)
  {
    int sin = 4;
    if (mainMat[0][j] != 0)
    {
      sin = mainMat[0][j];
    }
    if (sin == mainMat[1][j] && sin == mainMat[2][j])
    {
      ind = j + 4;
      win = mainMat[0][j];
      break;
    }
  }
  //colum cheak
  for (int i = 0; i < 3 && ind == 0; i++)
  {
    int sin = 4;
    if (mainMat[i][0] != 0)
    {
      sin = mainMat[i][0];
    }
    if (sin == mainMat[i][1] && sin == mainMat[i][2])
    {
      ind = i + 1;
      win = mainMat[i][0];
      break;
    }
  }
  //across cheak
  if (ind == 0)
  {
    int sin = 4;
    if (mainMat[0][0] != 0)
    {
      sin = mainMat[0][0];
    }
    if (sin == mainMat[1][1] && sin == mainMat[2][2])
    {
      ind = 7;
      win = mainMat[1][1];
    }
  }
  if (ind == 0)
  {
    int sin = 4;
    if (mainMat[0][2] != 0)
    {
      sin = mainMat[0][2];
    }
    if (sin == mainMat[1][1] && sin == mainMat[2][0])
    {
      ind = 8;
      win = mainMat[1][1];
    }
  }

  if (ind != 0)
  {
    drawWinLine(ind);
  }

  return win;
}

void clearMemory()
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 3; j++)
    {
      mainMat[i][j] = 0;
      memoryMat[i][j] = 0;
    }
  }
  decision = 0;
  display.clearDisplay();
  display.display();
}

void gameMode(int a)
{
  takeDecision();
  display.clearDisplay();
  tableDisplay();
  for (int i = 0; i < 9; i++)
  {
    int temp;
    if (i % 2 == decision)
    {
      if (a == 1)
        myMove1();
      else
        myMove2();
    }
    else
    {
      temp = takeMove();
    }

    if (temp)
    {
      picDisplay(2);
      delay(2000);
      clearMemory();
      return;
    }

    displayCrossCircle();
    int win = cheakThreeMove();

    if (choice == win)
    {
      ///oponent win
      picDisplay(3);
      delay(2000);
      clearMemory();
      return;
    }
    else if (win)
    {
      //oponent lose
      picDisplay(2);
      delay(2000);
      clearMemory();
      return;
    }
  }
  //match lose
  picDisplay(4);
  delay(2000);
  clearMemory();
  return;
}

void setup()
{
  Serial.begin(9600);
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.display();
  delay(1000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();
  display.invertDisplay(1);
  delay(100);
  display.invertDisplay(0);
  delay(100);
  display.display();
  display.clearDisplay();
  delay(100);
  Serial.println("hello   world");

  picDisplay(1); //ticTokToe
  takeChioce();
  //picDisplay(2);    //lose
  //picDisplay(3);    //win
  //picDisplay(4);    //draw
  //takeChioce();
}

void loop()
{
  display.clearDisplay();
  gameMode(2);
}